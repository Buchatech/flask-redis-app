# K8s file: flask-redis-app-all-in-one.yamlapiVersion: apps/v1
# K8s YAML validator https://validkube.com
# Python web app running on Flask
kind: Deployment
metadata:
  name: web
  labels:
    app: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
        - image: acr.web-img
          name: web
          ports:
            - containerPort: 8000
          resources: {}
          volumeMounts:
            - mountPath: /code
              name: web-claim0
      restartPolicy: Always
      volumes:
        - name: web-claim0
          persistentVolumeClaim:
            claimName: web-claim0
status: {}
---
  apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: web
    name: web-svc
  spec:
    ports:
      - name: "8000"
        port: 8000
        targetPort: 8000
    selector:
      app: web
    type: LoadBalancer
---
  apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: web-claim0
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
---
# Redis as a database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: redis
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
    spec:
      containers:
        - image: redislabs/redismod
          name: redis
          ports:
            - containerPort: 6379
          resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: redis-svc
spec:
  ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
  selector:
    app: redis
status:
  loadBalancer: {}